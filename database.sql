-- Skema Database JalaninAja v9
-- Versi ini menambahkan kolom avatar_url ke tabel Users dan memperbarui trigger.
-- =====================================================================
-- BAGIAN 1: MENGHAPUS TABEL LAMA (jalankan jika Anda memulai dari awal)
-- =====================================================================
DROP TABLE IF EXISTS "Upvotes" CASCADE;
DROP TABLE IF EXISTS "Report" CASCADE;
DROP TABLE IF EXISTS "Users" CASCADE;
DROP TABLE IF EXISTS "RouteAlternative" CASCADE;
DROP TABLE IF EXISTS "RouteSearch" CASCADE;
DROP TABLE IF EXISTS "RoutePointCache" CASCADE;


-- =====================================================================
-- BAGIAN 2: MEMBANGUN KEMBALI SEMUA TABEL DENGAN STRUKTUR BARU
-- =====================================================================

-- Tabel Pengguna (Users)
-- DIPERBARUI: Menambahkan kolom avatar_url untuk caching.
CREATE TABLE "Users" (
  user_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id_auth uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  name varchar(100) NOT NULL,
  email varchar(100) NOT NULL UNIQUE,
  points int DEFAULT 0,
  avatar_url text -- KOLOM BARU
);

-- Tabel Laporan (Report)
CREATE TABLE "Report" (
  report_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id bigint NOT NULL REFERENCES "Users" (user_id),
  description text,
  photo_url text,
  latitude float NOT NULL,
  longitude float NOT NULL,
  category varchar(255) NOT NULL,
  address text,
  upvote_count int DEFAULT 0,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


-- Tabel Upvotes
CREATE TABLE "Upvotes" (
    upvote_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id bigint NOT NULL REFERENCES "Users"(user_id) ON DELETE CASCADE,
    report_id bigint NOT NULL REFERENCES "Report"(report_id) ON DELETE CASCADE,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT unique_user_report_upvote UNIQUE (user_id, report_id)
);

-- Tabel Pencarian Rute (RouteSearch)
CREATE TABLE "RouteSearch" (
  search_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  start_point varchar(255) NOT NULL,
  end_point varchar(255) NOT NULL,
  mode varchar(50) NOT NULL,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Tabel Cache Titik Rute (RoutePointCache)
CREATE TABLE "RoutePointCache" (
    point_cache_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    latitude float NOT NULL,
    longitude float NOT NULL,
    walkability_score float,
    photo_url text,
    tree_count int,
    sidewalk_area float,
    is_residential_road boolean,
    heading int,
    detected_labels jsonb,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT routepointcache_lat_lng_unique UNIQUE (latitude, longitude)
);

-- Tabel Alternatif Rute (RouteAlternative)
CREATE TABLE "RouteAlternative" (
  route_alt_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  search_id bigint NOT NULL REFERENCES "RouteSearch" (search_id) ON DELETE CASCADE,
  average_walkability_score float NOT NULL,
  overview_polyline text NOT NULL,
  point_ids bigint[]
);


-- =====================================================================
-- BAGIAN 3: (PENTING) Memperbarui Trigger untuk Sinkronisasi Pengguna
-- =====================================================================
-- DIPERBARUI: Trigger ini sekarang juga menyalin avatar_url dari metadata.
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public."Users" (user_id_auth, name, email, avatar_url)
  VALUES (
    new.id, 
    new.raw_user_meta_data->>'full_name', 
    new.email,
    new.raw_user_meta_data->>'avatar_url' -- Menyalin avatar_url
  );
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Menghubungkan trigger ke tabel auth.users
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();


-- =====================================================================
-- BAGIAN 4: (OPSIONAL) Menambahkan RLS (Row Level Security)
-- =====================================================================
CREATE POLICY "Allow authenticated uploads"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'avatars' AND
  auth.uid() = (storage.foldername(name))[1]::uuid
);

CREATE POLICY "Allow authenticated read access"
ON storage.objects FOR SELECT
TO authenticated
USING (
  bucket_id = 'avatars'
);

CREATE POLICY "Allow authenticated updates"
ON storage.objects FOR UPDATE
TO authenticated
USING (
  bucket_id = 'avatars' AND
  auth.uid() = owner
);

CREATE POLICY "Allow authenticated deletes"
ON storage.objects FOR DELETE
TO authenticated
USING (
  bucket_id = 'avatars' AND
  auth.uid() = owner
);

-- === KEBIJAKAN UNTUK BUCKET 'report-photos' (BARU & PENTING) ===

-- 1. Izinkan pengguna yang terautentikasi untuk mengunggah foto laporan.
CREATE POLICY "Allow authenticated report photo uploads"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK ( bucket_id = 'report-photos' );

-- 2. Izinkan siapa saja untuk melihat/membaca foto laporan (karena akan ditampilkan di feed publik).
CREATE POLICY "Allow public read access on report photos"
ON storage.objects FOR SELECT
USING ( bucket_id = 'report-photos' );